import pandas as pd
import sys
# from pathlib import Path


def extract_data_IESA_multiple(intervals, list_sheets, nrows, filters, headers, file_path):
    """
    Extracts data from multiple sheets of an Excel file generated by IESA-Opt,
    using specified filters and headers for different intervals and sheets.

    Args:
        intervals (list): List of year intervals to extract
        list_sheets (list): List of sheet names to read from the Excel file
        nrows (list): List specifying the number of rows to read from each sheet
        filters (list): List of filter values (strings or tuples) to match rows per sheet
        headers (list): List of column names (strings or tuples) used as filters per sheet
        file_path (str or Path): Path to the Excel file

    Returns:
        dict: Nested dictionary with keys of the form 'results_<interval>_<sheet>'
              and values as lists of dictionaries with extracted values
    """
    print("Start extracting data from IESA-Opt")

    # Check that all input lists have the same length
    if len({len(list_sheets), len(nrows), len(headers), len(filters)}) != 1:
        print("Error: The number of sheets, headers, filters, or nrows do not match.")
        sys.exit()

    results_year_sheet = {}

    # Initialize the dictionary keys for each interval-sheet combination
    for interval in intervals:
        for sheet in list_sheets:
            results_year_sheet[f"results_{interval}_{sheet}"] = []

    # Loop over each interval and sheet
    for i in range(len(intervals)):
        for j in range(len(list_sheets)):
            # Read specific sheet from Excel file
            df = pd.read_excel(file_path, sheet_name=list_sheets[j], nrows=nrows[j], header=0)

            header = headers[j]
            sheet_filters = filters[j]

            # Loop over each set of filter values
            for filter_values in sheet_filters:
                if isinstance(header, str):
                    # Check if header exists
                    if header not in df.columns:
                        print(f"Header '{header}' not found in sheet '{list_sheets[j]}'")
                        continue

                    row = df[df[header] == filter_values]
                    filter_entry = {header: filter_values}
                elif isinstance(header, tuple) and isinstance(filter_values, tuple):
                    # Check if all headers exist
                    missing_headers = [h for h in header if h not in df.columns]
                    if missing_headers:
                        print(f"Headers {missing_headers} not found in sheet '{list_sheets[j]}'")
                        continue

                    # Multi-column filter
                    condition = pd.Series([True] * len(df))
                    filter_entry = {}
                    for h, f in zip(header, filter_values):
                        condition &= df[h] == f
                        filter_entry[h] = f
                    row = df[condition]
                else:
                    raise ValueError(f"Header/filter mismatch in sheet {list_sheets[j]}")

                # Extract the value or set as None if not found
                if not row.empty:
                    value = float(row[intervals[i]].values[0])
                else:
                    value = None
                    print(f"Filter match not found for {filter_entry} in sheet "
                          f"'{list_sheets[j]}' for year '{intervals[i]}'")

                # Add value to result entry
                filter_entry["value"] = value
                results_year_sheet[f"results_{intervals[i]}_{list_sheets[j]}"].append(filter_entry)

    print("The raw results dictionary from IESA-Opt is created")
    return results_year_sheet


# intervals = ['2030', '2040', '2050']
# file_path = Path("U:/IESA-Opt-Dev_20250605_linking_correct/Output/ResultsModelLinking/
# Results_model_linking_20250621_09_08/ResultsModelLinking_General_Iteration_1.xlsx")
#
# list_sheets = ["LCOEs", "SupplyDemand"]
# headers = [("Tech_ID", "Type1", "Type2"), ("Type", "Tech_ID")]
# filters = [
#     [ ("TNB01_01", "Real","Fuels"), ("TNB01_03", "Real","Fuels") ],
#     [("supply", "WAI01_01"), ("supply", "WAI01_02")]
# ]
# nrows = [1689, 830]
#
# results = extract_data_IESA_multiple(intervals, list_sheets, nrows, filters, headers, file_path)
# print(results)


def get_value_IESA_multiple(results_year_sheet, interval, sheet, **filters):
    key = f"results_{interval}_{sheet}"
    entries = results_year_sheet.get(key, [])

    for entry in entries:
        if all(entry.get(k) == v for k, v in filters.items()):
            return entry['value']

    raise ValueError(f"No value found for {interval}, {sheet}, filters: {filters}")

# x = get_value_IESA_multiple(
#     results, 2030, "LCOEs",
#     Tech_ID="TNB01_01", Type1="Real", Type2="Fuels"
# )
#
# y = get_value_IESA_multiple(
#     results, 2040, "SupplyDemand",
#     Type="supply", Tech_ID="WAI01_02"
# )
# print(x,y)