from pathlib import Path
from adopt_net0.utilities import get_set_t

import config_model_linking as cfg


def get_results_cluster_technology_output_dict(adopt_hub):
    """
    Extracts total output values for specified technologies from HDF5 result files generated by the cluster model.
    Supports multiple outputs per technology using custom alias keys.

    Args:
        adopt_hub: The model object with the results of the cluster.

    Returns:
        dict: Dictionary with keys of the form (location, interval, tech_alias) and values as total output floats.
    """
    print("Extracting technology outputs from cluster model")

    # Include "_existing" variants for each tech alias
    tech_output_map = {}
    for alias, (actual_tech, output_var) in cfg.base_tech_output_map.items():
        tech_output_map[alias] = (actual_tech, output_var)
        tech_output_map[f"{alias}_existing"] = (f"{actual_tech}_existing", output_var)

    # Define scaling factor if using fast_run
    factor_fast_run = 876 if cfg.fast_run else 1
    resolution = 'full' if cfg.fast_run else 'clustered'

    tech_output_dict = {}

    for interval in cfg.intervals:
        interval_block = adopt_hub[interval].model[resolution].periods[interval]
        set_t = get_set_t(adopt_hub[interval].data.model_config, interval_block)
        for alias, (actual_tech_name, output_var_name) in tech_output_map.items():
            if actual_tech_name in interval_block.node_blocks[cfg.location].tech_blocks_active:
                tech_block = interval_block.node_blocks[cfg.location].tech_blocks_active[actual_tech_name]
                if '_input' in alias:
                    annual_prod = sum(tech_block.var_input_tot[t, output_var_name].value for t in set_t)
                else:
                    annual_prod = sum(tech_block.var_output_tot[t, output_var_name].value for t in set_t)

                if annual_prod > 0:
                    tech_output_dict[(cfg.location, interval, alias)] = annual_prod * factor_fast_run
                    print(f"ℹ️ Output of {alias} in {interval} at {cfg.location}: {annual_prod * factor_fast_run}")


    return tech_output_dict

